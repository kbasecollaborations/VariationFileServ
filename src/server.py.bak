#!/usr/bin/python
#
# Flask server, woo!
#


"""The primary router for the Variation Caching Service API v1."""
import json
import flask
import uuid
import os






from flask import Flask, request, redirect, url_for, send_from_directory

from src.Utils.VariationCache import VariationCache, _mkdir_p





FILE_SERVER_LOCATION = '/kb/module/work'

# Setup Flask app.
app = Flask(__name__, static_folder=FILE_SERVER_LOCATION)
app.debug = True




@app.route('/', methods=['GET'])
def root():
    """Root route for the API which lists all paths."""
  #TODO: put some message here
    return None


@app.route('/create_cache', methods=['POST'])
def create_cache():
    """Fetch a file given a shock ID."""
    try:
        json_data = json.loads(flask.request.get_data())    
    except Exception:
        raise RuntimeError('Unable to parse JSON request body.')
    auth_token = flask.request.headers.get('Authorization')

    auth_token ="JJPRPDD7XZWC54Q7WE2HKM3AWZDKZL3F" 
    url = "https://appdev.kbase.us/services/"
    md5 = "3b51fc3141cf974ab831b6a0d7f3ee15"
    shock_id = "822391b1-4730-48e1-aec3-5228ff0697a4"
    source = "shock"
    variation_ref = "39465/42/22"
    





    vc = VariationCache(url, auth_token, FILE_SERVER_LOCATION, variation_ref)
    resp = vc.create_cache_variation()



    #resp = vu.create_cache(shock_id, source, FILE_SERVER_LOCATION, md5)

    #if resp is not None:
    #    return (flask.jsonify(resp))
    #else:
    #    raise RuntimeError ("Error in creating cache")



@app.route('/data/<path:path>')
def static_proxy(path):
  # send_static_file will guess the correct MIME type
    

    #name = 

    #if  not os.path.isdir(FILE_SERVER_LOCATION):
    #   raise RuntimeError(f" Specified file server path does not exist:{FILE_SERVER_LOCATION}")
    #   return
    #else:
    #    for root, dirs, files in os.walk(FILE_SERVER_LOCATION):
    #        if name in files:
    #            resp = os.path.join(root, name)
    #            print(resp)
    #path = "a2cd3ae4-19c8-42e8-aefe-019d87acce28/822391b1-4730-48e1-aec3-5228ff0697a4"
    path="fae8a247-8b9c-4464-abf8-e5df94f84784/39465_42_22/original_LFC_arabidopsis.vcf.gz"

    return app.send_static_file(path)






if __name__ == '__main__':
  app.run()

